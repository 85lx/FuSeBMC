        -:    0:Source:/home/kaled/Desktop/2020-my-projects/sv-benchmarks-testcomp20/c/reducercommutativity/rangesum10.i
        -:    0:Graph:harness.gcno
        -:    0:Data:harness.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:extern void __VERIFIER_error() __attribute__ ((__noreturn__));
        -:    2:extern int __VERIFIER_nondet_int();
        -:    3:
function init_nondet called 8 returned 100% blocks executed 100%
        8:    4:void init_nondet(int x[10]) {
        -:    5:  int i;
       88:    6:  for (i = 0; i < 10; i++) {
branch  0 taken 80
branch  1 taken 8 (fallthrough)
       80:    7:    x[i] = __VERIFIER_nondet_int();
call    0 returned 80
        -:    8:  }
        8:    9:}
        -:   10:
function rangesum called 24 returned 100% blocks executed 89%
       24:   11:int rangesum (int x[10])
        -:   12:{
        -:   13:  int i;
        -:   14:  long long ret;
       24:   15:  ret = 0;
       24:   16:  int cnt = 0;
      264:   17:  for (i = 0; i < 10; i++) {
branch  0 taken 240
branch  1 taken 24 (fallthrough)
      240:   18:    if( i > 10/2){
branch  0 taken 96 (fallthrough)
branch  1 taken 144
       96:   19:       ret = ret + x[i];
       96:   20:       cnt = cnt + 1;
        -:   21:    }
        -:   22:  }
       24:   23:  if ( cnt !=0)
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24:   24:    return ret / cnt;
        -:   25:  else
    #####:   26:    return 0;
        -:   27:}
        -:   28:
function main called 8 returned 75% blocks executed 100%
        8:   29:int main ()
        -:   30:{
        -:   31:  int x[10];
        8:   32:  init_nondet(x);
call    0 returned 8
        -:   33:  int temp;
        -:   34:  int ret;
        -:   35:  int ret2;
        -:   36:  int ret5;
        -:   37:
        8:   38:  ret = rangesum(x);
call    0 returned 8
        -:   39:
        8:   40:  temp=x[0];x[0] = x[1]; x[1] = temp;
        8:   41:  ret2 = rangesum(x);
call    0 returned 8
        8:   42:  temp=x[0];
       80:   43:  for(int i =0 ; i<10 -1; i++){
branch  0 taken 72
branch  1 taken 8 (fallthrough)
       72:   44:     x[i] = x[i+1];
        -:   45:  }
        8:   46:  x[10 -1] = temp;
        8:   47:  ret5 = rangesum(x);
call    0 returned 8
        -:   48:
        8:   49:  if(ret != ret2 || ret !=ret5){
branch  0 taken 8 (fallthrough)
branch  1 taken 0
branch  2 taken 2 (fallthrough)
branch  3 taken 6
        2:   50:    __VERIFIER_error();
call    0 returned 0
        -:   51:  }
        6:   52:  return 1;
        -:   53:}
