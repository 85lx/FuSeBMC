        -:    0:Source:output/harness.c
        -:    0:Graph:harness.gcno
        -:    0:Data:harness.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:struct _IO_FILE;
        -:    2:typedef struct _IO_FILE FILE;
        -:    3:extern struct _IO_FILE *stdin;
        -:    4:extern struct _IO_FILE *stderr;
        -:    5:typedef long unsigned int size_t;
        -:    6:extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));
        -:    7:extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));
        -:    8:extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream);
        -:    9:extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
        -:   10: extern size_t strlen (const char *__s __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))));
        -:   11:extern int fprintf (FILE *__restrict __stream, const char *__restrict __format, ...);
        -:   12: extern void *malloc (size_t __size __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)));
        -:   13: extern void *memcpy (void *__restrict __dest, const void *__restrict __src, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
        -:   14: extern char *strcpy (char *__restrict __dest, const char *__restrict __src) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
        -:   15: extern char *strcat (char *__restrict __dest, const char *__restrict __src) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
        -:   16:// testcov is tool for validation and execution of test suites.
        -:   17:// This file is part of testcov.
        -:   18://
        -:   19:// Copyright (C) 2018 - 2020  Dirk Beyer
        -:   20:// All rights reserved.
        -:   21://
        -:   22:// Licensed under the Apache License, Version 2.0 (the "License");
        -:   23:// you may not use this file except in compliance with the License.
        -:   24:// You may obtain a copy of the License at
        -:   25://
        -:   26://     http://www.apache.org/licenses/LICENSE-2.0
        -:   27://
        -:   28:// Unless required by applicable law or agreed to in writing, software
        -:   29:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   30:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   31:// See the License for the specific language governing permissions and
        -:   32:// limitations under the License.
        -:   33:
        -:   34:#define MAX_INPUT_SIZE 3000
        -:   35:#ifdef GCOV
        -:   36:extern void __gcov_flush(void);
        -:   37:#endif
        -:   38:
function abort_prog called 0 returned 0% blocks executed 0%
    #####:   39:void abort_prog() {
        -:   40:#ifdef GCOV
    #####:   41:  __gcov_flush();
call    0 never executed
        -:   42:#endif
    #####:   43:  abort();
        -:   44:}
        -:   45:
function __VERIFIER_assume called 0 returned 0% blocks executed 0%
    #####:   46:void __VERIFIER_assume(int cond) {
    #####:   47:  if (!cond) {
branch  0 never executed
branch  1 never executed
    #####:   48:    abort_prog();
call    0 never executed
        -:   49:  }
    #####:   50:}
        -:   51:
function __VERIFIER_error called 2 returned 0% blocks executed 100%
        2:   52:void __VERIFIER_error() {
        2:   53:  fprintf(stderr, "Error found.\n");
call    0 returned 2
        2:   54:  exit(1);
        -:   55:}
        -:   56:
        -:   57:char *get_input();
        -:   58:
        -:   59:// taken from https://stackoverflow.com/a/32496721
function replace_char called 0 returned 0% blocks executed 0%
    #####:   60:void replace_char(char *str, char find, char replace) {
    #####:   61:  char *current_pos = strchr(str, find);
    #####:   62:  while (current_pos) {
branch  0 never executed
branch  1 never executed
    #####:   63:    *current_pos = replace;
    #####:   64:    current_pos = strchr(current_pos, find);
        -:   65:  }
    #####:   66:}
        -:   67:
function parse_input_from called 80 returned 100% blocks executed 56%
       80:   68:void parse_input_from(char *inp_var, char *format, void *destination) {
        -:   69:  char format_with_fallback[13];
       80:   70:  strcpy(format_with_fallback, format);
       80:   71:  strcat(format_with_fallback, "%c%c%c%c");
       80:   72:  if (inp_var[0] == '0' && inp_var[1] == 'x') {
branch  0 taken 70 (fallthrough)
branch  1 taken 10
branch  2 taken 0 (fallthrough)
branch  3 taken 70
    #####:   73:    replace_char(format_with_fallback, 'd', 'x');
call    0 never executed
        -:   74:  } else {
       80:   75:    if (inp_var[0] == '\'' || inp_var[0] == '\"') {
branch  0 taken 80 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 80
    #####:   76:      int inp_length = strlen(inp_var);
        -:   77:      // Remove ' at the end
    #####:   78:      inp_var[inp_length - 1] = '\0';
        -:   79:      // Remove ' in the beginning
    #####:   80:      inp_var++;
        -:   81:    }
        -:   82:  }
        -:   83:  char leftover[4];
       80:   84:  int filled = sscanf(inp_var, format_with_fallback, destination, &leftover[0],
        -:   85:                      &leftover[1], &leftover[2], &leftover[3]);
       80:   86:  _Bool is_valid = 1;
       80:   87:  if (filled == 5 || filled == 0) {
branch  0 taken 80 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 80
    #####:   88:    is_valid = 0;
        -:   89:  }
       80:   90:  while (filled > 1) {
branch  0 taken 0
branch  1 taken 80 (fallthrough)
    #####:   91:    filled--;
    #####:   92:    char literal = leftover[filled - 1];
    #####:   93:    switch (literal) {
branch  0 never executed
branch  1 never executed
    #####:   94:    case 'l':
        -:   95:    case 'L':
        -:   96:    case 'u':
        -:   97:    case 'U':
        -:   98:    case 'f':
        -:   99:    case 'F':
    #####:  100:      break;
    #####:  101:    default:
    #####:  102:      is_valid = 0;
        -:  103:    }
        -:  104:  }
        -:  105:
       80:  106:  if (!is_valid) {
branch  0 taken 0 (fallthrough)
branch  1 taken 80
    #####:  107:    fprintf(stderr, "Can't parse input: '%s'\n", inp_var);
call    0 never executed
    #####:  108:    abort_prog();
call    0 never executed
        -:  109:  }
       80:  110:}
        -:  111:
function parse_input called 80 returned 100% blocks executed 100%
       80:  112:void parse_input(char *format, void *destination) {
       80:  113:  char *inp_var = get_input();
call    0 returned 80
       80:  114:  parse_input_from(inp_var, format, destination);
call    0 returned 80
       80:  115:}
        -:  116:
function __VERIFIER_nondet_char called 0 returned 0% blocks executed 0%
    #####:  117:char __VERIFIER_nondet_char() {
        -:  118:  char val;
    #####:  119:  char *inp_var = get_input();
call    0 never executed
    #####:  120:  if (inp_var[0] == '\'') {
branch  0 never executed
branch  1 never executed
    #####:  121:    parse_input_from(inp_var, "%c", &val);
call    0 never executed
        -:  122:  } else {
    #####:  123:    parse_input_from(inp_var, "%hhd", &val);
call    0 never executed
        -:  124:  }
    #####:  125:  return val;
        -:  126:}
        -:  127:
function __VERIFIER_nondet_uchar called 0 returned 0% blocks executed 0%
    #####:  128:unsigned char __VERIFIER_nondet_uchar() {
        -:  129:  unsigned char val;
    #####:  130:  parse_input("%hhu", &val);
call    0 never executed
    #####:  131:  return val;
        -:  132:}
        -:  133:
function __VERIFIER_nondet_short called 0 returned 0% blocks executed 0%
    #####:  134:short __VERIFIER_nondet_short() {
        -:  135:  short val;
    #####:  136:  parse_input("%hd", &val);
call    0 never executed
    #####:  137:  return val;
        -:  138:}
        -:  139:
function __VERIFIER_nondet_ushort called 0 returned 0% blocks executed 0%
    #####:  140:unsigned short __VERIFIER_nondet_ushort() {
        -:  141:  unsigned short val;
    #####:  142:  parse_input("%hu", &val);
call    0 never executed
    #####:  143:  return val;
        -:  144:}
        -:  145:
function __VERIFIER_nondet_int called 80 returned 100% blocks executed 100%
       80:  146:int __VERIFIER_nondet_int() {
        -:  147:  int val;
       80:  148:  parse_input("%d", &val);
call    0 returned 80
       80:  149:  return val;
        -:  150:}
        -:  151:
function __VERIFIER_nondet_uint called 0 returned 0% blocks executed 0%
    #####:  152:unsigned int __VERIFIER_nondet_uint() {
        -:  153:  unsigned int val;
    #####:  154:  parse_input("%u", &val);
call    0 never executed
    #####:  155:  return val;
        -:  156:}
        -:  157:
function __VERIFIER_nondet_long called 0 returned 0% blocks executed 0%
    #####:  158:long __VERIFIER_nondet_long() {
        -:  159:  long val;
    #####:  160:  parse_input("%ld", &val);
call    0 never executed
    #####:  161:  return val;
        -:  162:}
        -:  163:
function __VERIFIER_nondet_ulong called 0 returned 0% blocks executed 0%
    #####:  164:unsigned long __VERIFIER_nondet_ulong() {
        -:  165:  unsigned long val;
    #####:  166:  parse_input("%lu", &val);
call    0 never executed
    #####:  167:  return val;
        -:  168:}
        -:  169:
function __VERIFIER_nondet_longlong called 0 returned 0% blocks executed 0%
    #####:  170:long long __VERIFIER_nondet_longlong() {
        -:  171:  long long val;
    #####:  172:  parse_input("%lld", &val);
call    0 never executed
    #####:  173:  return val;
        -:  174:}
        -:  175:
function __VERIFIER_nondet_ulonglong called 0 returned 0% blocks executed 0%
    #####:  176:unsigned long long __VERIFIER_nondet_ulonglong() {
        -:  177:  unsigned long long val;
    #####:  178:  parse_input("%llu", &val);
call    0 never executed
    #####:  179:  return val;
        -:  180:}
        -:  181:
function __VERIFIER_nondet_float called 0 returned 0% blocks executed 0%
    #####:  182:float __VERIFIER_nondet_float() {
        -:  183:  float val;
    #####:  184:  parse_input("%f", &val);
call    0 never executed
    #####:  185:  return val;
        -:  186:}
        -:  187:
function __VERIFIER_nondet_double called 0 returned 0% blocks executed 0%
    #####:  188:double __VERIFIER_nondet_double() {
        -:  189:  double val;
    #####:  190:  parse_input("%lf", &val);
call    0 never executed
    #####:  191:  return val;
        -:  192:}
        -:  193:
function __VERIFIER_nondet_bool called 0 returned 0% blocks executed 0%
    #####:  194:_Bool __VERIFIER_nondet_bool() { return (_Bool)__VERIFIER_nondet_int(); }
call    0 never executed
        -:  195:
function __VERIFIER_nondet_pointer called 0 returned 0% blocks executed 0%
    #####:  196:void *__VERIFIER_nondet_pointer() { return (void *)__VERIFIER_nondet_ulong(); }
call    0 never executed
        -:  197:
function __VERIFIER_nondet_size_t called 0 returned 0% blocks executed 0%
    #####:  198:unsigned int __VERIFIER_nondet_size_t() { return __VERIFIER_nondet_uint(); }
call    0 never executed
        -:  199:
function __VERIFIER_nondet_u8 called 0 returned 0% blocks executed 0%
    #####:  200:unsigned char __VERIFIER_nondet_u8() { return __VERIFIER_nondet_uchar(); }
call    0 never executed
        -:  201:
function __VERIFIER_nondet_u16 called 0 returned 0% blocks executed 0%
    #####:  202:unsigned short __VERIFIER_nondet_u16() { return __VERIFIER_nondet_ushort(); }
call    0 never executed
        -:  203:
function __VERIFIER_nondet_u32 called 0 returned 0% blocks executed 0%
    #####:  204:unsigned int __VERIFIER_nondet_u32() { return __VERIFIER_nondet_uint(); }
call    0 never executed
        -:  205:
function __VERIFIER_nondet_U32 called 0 returned 0% blocks executed 0%
    #####:  206:unsigned int __VERIFIER_nondet_U32() { return __VERIFIER_nondet_u32(); }
call    0 never executed
        -:  207:
function __VERIFIER_nondet_unsigned_char called 0 returned 0% blocks executed 0%
    #####:  208:unsigned char __VERIFIER_nondet_unsigned_char() {
    #####:  209:  return __VERIFIER_nondet_uchar();
call    0 never executed
        -:  210:}
        -:  211:
function __VERIFIER_nondet_unsigned called 0 returned 0% blocks executed 0%
    #####:  212:unsigned int __VERIFIER_nondet_unsigned() { return __VERIFIER_nondet_uint(); }
call    0 never executed
        -:  213:
function __VERIFIER_nondet_string called 0 returned 0% blocks executed 0%
    #####:  214:const char *__VERIFIER_nondet_string() {
    #####:  215:  char *val = malloc(MAX_INPUT_SIZE + 1);
        -:  216:  // Read to end of line
    #####:  217:  parse_input("%[^\n]", val);
call    0 never executed
    #####:  218:  return val;
        -:  219:}
        -:  220:
function get_input called 80 returned 100% blocks executed 75%
       80:  221:char * get_input() {
       80:  222:    char * inp_var = malloc(MAX_INPUT_SIZE);
       80:  223:    char * result = fgets(inp_var, MAX_INPUT_SIZE, stdin);
call    0 returned 80
       80:  224:    if (result == 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 80
    #####:  225:        fprintf(stderr, "No more test inputs available, exiting\n");
call    0 never executed
    #####:  226:        exit(1);
call    0 never executed
        -:  227:    }
       80:  228:    unsigned int input_length = strlen(inp_var)-1;
        -:  229:    /* Remove '\n' at end of input */
       80:  230:    if (inp_var[input_length] == '\n') {
branch  0 taken 72 (fallthrough)
branch  1 taken 8
       72:  231:        inp_var[input_length] = '\0';
        -:  232:    }
       80:  233:    return inp_var;
        -:  234:}
